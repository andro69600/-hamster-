# -*- coding: utf-8 -*-
"""task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17lqZbboobMVNxVmpybGfr3VkxvHK-EpT
"""

def expand_digit_letter(text: str) -> str:

    i = 0
    result = []
    while i < len(text):

        if text[i].isdigit():
            num_str = text[i]
            i += 1
            while i < len(text) and text[i].isdigit():
                num_str += text[i]
                i += 1

            if i < len(text) and text[i] in "лпвн":
                letter = text[i]
                i += 1

                result.append(letter * int(num_str))
            else:

                result.append(num_str)
        else:

            result.append(text[i])
            i += 1

    return "".join(result)

def decode_command(command: str) -> str:

    stack = []

    for char in command:
        if char == ')':

            sub_command = []
            while stack and stack[-1] != '(':
                sub_command.append(stack.pop())
            sub_command.reverse()
            if stack and stack[-1] == '(':
                stack.pop()
            inner_string = "".join(sub_command)

            inner_string = expand_digit_letter(inner_string)

            num_str = []
            while stack and stack[-1].isdigit():
                num_str.append(stack.pop())
            num_str.reverse()

            repeat = int("".join(num_str)) if num_str else 1
            stack.append(inner_string * repeat)
        else:
            stack.append(char)


    result = "".join(stack)
    result = expand_digit_letter(result)
    return result

def is_valid_expression(expr: str) -> bool:
    return expr.count('(') == expr.count(')')

def main():
    while True:
        input_command = input("Введите команду: ")
        if is_valid_expression(input_command):
            decoded_command = decode_command(input_command)
            print(decoded_command)
            break
        else:
            print("Некорректное выражение. Попробуйте снова.")

if __name__ == "__main__":
    main()